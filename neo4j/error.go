/*
 * Copyright (c) 2002-2018 "Neo4j,"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package neo4j

import (
	"fmt"
	"github.com/neo4j-drivers/gobolt"
)

type databaseError struct {
	classification string
	code           string
	message        string
}

type connectorError struct {
	state       int
	code        int
	description string
}

type driverError struct {
	message string
}

func (failure *databaseError) Classification() string {
	return failure.classification
}

func (failure *databaseError) Code() string {
	return failure.code
}

func (failure *databaseError) Message() string {
	return failure.message
}

func (failure *databaseError) Error() string {
	return fmt.Sprintf("database returned error [%s]: %s", failure.code, failure.message)
}

func (failure *connectorError) State() int {
	return failure.state
}

func (failure *connectorError) Code() int {
	return failure.code
}

func (failure *connectorError) Description() string {
	return failure.description
}

func (failure *connectorError) Error() string {
	return fmt.Sprintf("expected connection to be in READY state, where it is %d [error is %d]", failure.state, failure.code)
}

func (failure *driverError) Error() string {
	return failure.message
}

func newDriverError(format string, args ...interface{}) gobolt.GenericError {
	return &driverError{message: fmt.Sprintf(format, args...)}
}

func newDatabaseError(classification, code, message string) gobolt.DatabaseError {
	return &databaseError{code: code, message: message, classification: classification}
}

func newConnectorError(state int, code int, description string) gobolt.ConnectorError {
	return &connectorError{state: state, code: code, description: description}
}

func isRetriableError(err error) bool {
	return gobolt.IsServiceUnavailable(err) || gobolt.IsTransientError(err) || gobolt.IsWriteError(err)
}

// IsServiceUnavailable is a utility method to check if the provided error can be classified
// to be in service unavailable category.
func IsServiceUnavailable(err error) bool {
	return gobolt.IsServiceUnavailable(err)
}

// IsDriverError is a utility method to check if the provided error is generated by the driver
func IsDriverError(err error) bool {
	_, ok := err.(*driverError)
	return ok
}

// IsTransientError is a utility method to check if the provided error is a DatabaseError with
// TransientError classification
func IsTransientError(err error) bool {
	return gobolt.IsTransientError(err)
}
