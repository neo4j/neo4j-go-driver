/*
 * Copyright (c) 2002-2019 "Neo4j,"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neo4j/neo4j-go-driver/neo4j (interfaces: Record)

// Package mocks is a generated GoMock package.
package neo4j

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRecord is a mock of Record interface
type MockRecord struct {
	ctrl     *gomock.Controller
	recorder *MockRecordMockRecorder
}

// MockRecordMockRecorder is the mock recorder for MockRecord
type MockRecordMockRecorder struct {
	mock *MockRecord
}

// NewMockRecord creates a new mock instance
func NewMockRecord(ctrl *gomock.Controller) *MockRecord {
	mock := &MockRecord{ctrl: ctrl}
	mock.recorder = &MockRecordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecord) EXPECT() *MockRecordMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRecord) Get(arg0 string) (interface{}, bool) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRecordMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRecord)(nil).Get), arg0)
}

// GetByIndex mocks base method
func (m *MockRecord) GetByIndex(arg0 int) interface{} {
	ret := m.ctrl.Call(m, "GetByIndex", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetByIndex indicates an expected call of GetByIndex
func (mr *MockRecordMockRecorder) GetByIndex(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockRecord)(nil).GetByIndex), arg0)
}

// Keys mocks base method
func (m *MockRecord) Keys() []string {
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockRecordMockRecorder) Keys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRecord)(nil).Keys))
}

// Values mocks base method
func (m *MockRecord) Values() []interface{} {
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Values indicates an expected call of Values
func (mr *MockRecordMockRecorder) Values() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockRecord)(nil).Values))
}
