/*
 * Copyright (c) 2002-2019 "Neo4j,"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neo4j/neo4j-go-driver/neo4j (interfaces: ResultSummary)

// Package mocks is a generated GoMock package.
package neo4j

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockResultSummary is a mock of ResultSummary interface
type MockResultSummary struct {
	ctrl     *gomock.Controller
	recorder *MockResultSummaryMockRecorder
}

// MockResultSummaryMockRecorder is the mock recorder for MockResultSummary
type MockResultSummaryMockRecorder struct {
	mock *MockResultSummary
}

// NewMockResultSummary creates a new mock instance
func NewMockResultSummary(ctrl *gomock.Controller) *MockResultSummary {
	mock := &MockResultSummary{ctrl: ctrl}
	mock.recorder = &MockResultSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResultSummary) EXPECT() *MockResultSummaryMockRecorder {
	return m.recorder
}

// Counters mocks base method
func (m *MockResultSummary) Counters() Counters {
	ret := m.ctrl.Call(m, "Counters")
	ret0, _ := ret[0].(Counters)
	return ret0
}

// Counters indicates an expected call of Counters
func (mr *MockResultSummaryMockRecorder) Counters() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counters", reflect.TypeOf((*MockResultSummary)(nil).Counters))
}

// Notifications mocks base method
func (m *MockResultSummary) Notifications() []Notification {
	ret := m.ctrl.Call(m, "Notifications")
	ret0, _ := ret[0].([]Notification)
	return ret0
}

// Notifications indicates an expected call of Notifications
func (mr *MockResultSummaryMockRecorder) Notifications() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockResultSummary)(nil).Notifications))
}

// Plan mocks base method
func (m *MockResultSummary) Plan() Plan {
	ret := m.ctrl.Call(m, "Plan")
	ret0, _ := ret[0].(Plan)
	return ret0
}

// Plan indicates an expected call of Plan
func (mr *MockResultSummaryMockRecorder) Plan() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockResultSummary)(nil).Plan))
}

// Profile mocks base method
func (m *MockResultSummary) Profile() ProfiledPlan {
	ret := m.ctrl.Call(m, "Profile")
	ret0, _ := ret[0].(ProfiledPlan)
	return ret0
}

// Profile indicates an expected call of Profile
func (mr *MockResultSummaryMockRecorder) Profile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockResultSummary)(nil).Profile))
}

// ResultAvailableAfter mocks base method
func (m *MockResultSummary) ResultAvailableAfter() time.Duration {
	ret := m.ctrl.Call(m, "ResultAvailableAfter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ResultAvailableAfter indicates an expected call of ResultAvailableAfter
func (mr *MockResultSummaryMockRecorder) ResultAvailableAfter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResultAvailableAfter", reflect.TypeOf((*MockResultSummary)(nil).ResultAvailableAfter))
}

// ResultConsumedAfter mocks base method
func (m *MockResultSummary) ResultConsumedAfter() time.Duration {
	ret := m.ctrl.Call(m, "ResultConsumedAfter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ResultConsumedAfter indicates an expected call of ResultConsumedAfter
func (mr *MockResultSummaryMockRecorder) ResultConsumedAfter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResultConsumedAfter", reflect.TypeOf((*MockResultSummary)(nil).ResultConsumedAfter))
}

// Server mocks base method
func (m *MockResultSummary) Server() ServerInfo {
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(ServerInfo)
	return ret0
}

// Server indicates an expected call of Server
func (mr *MockResultSummaryMockRecorder) Server() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockResultSummary)(nil).Server))
}

// Statement mocks base method
func (m *MockResultSummary) Statement() Statement {
	ret := m.ctrl.Call(m, "Statement")
	ret0, _ := ret[0].(Statement)
	return ret0
}

// Statement indicates an expected call of Statement
func (mr *MockResultSummaryMockRecorder) Statement() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statement", reflect.TypeOf((*MockResultSummary)(nil).Statement))
}

// StatementType mocks base method
func (m *MockResultSummary) StatementType() StatementType {
	ret := m.ctrl.Call(m, "StatementType")
	ret0, _ := ret[0].(StatementType)
	return ret0
}

// StatementType indicates an expected call of StatementType
func (mr *MockResultSummaryMockRecorder) StatementType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatementType", reflect.TypeOf((*MockResultSummary)(nil).StatementType))
}
